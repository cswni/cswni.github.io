{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Desarrollo de app para registro de asistencia estudiantil Equipo de estudiantes de la Universidad Martin Lutero en Ocotal, Nueva Segovia que desarrollan esta aplicaci\u00f3n (web, m\u00f3vil, API). Instructor Datos de contacto Carlos Andr\u00e9s P\u00e9rez. 8 1 3 2 3 0 0 0 prof.cperezu@uml.edu.ni Equipo de estudiantes II y III a\u00f1o de Ingenier\u00eda en Sistemas Juan Magdiel Oscar Rosales Jorge Gaitan Luis Benavidez Marvin Vallejo Colaborador Ingeniero en sistemas Adri\u00e1n Calderon. 8 1 3 2 3 0 0 0 amarusadrian@gmail.com Detalles Detalles de los procesos que se prentenden cubrir Registro de estudiantes, profesores y personal de administraci\u00f3n Registro del horario trimestral Registro de las asignaturas por carrera Registro de las carreras Registro de los grupos por carrera y a\u00f1o lectivo Registro de la asistencia por parte de los profesores Generaci\u00f3n de reportes(Diario, Mensual y Trimestral) Periodo programado Desde el 12 de octubre de 2019 al 12 de febrero de 2020","title":"Inicio"},{"location":"#desarrollo-de-app-para-registro-de-asistencia-estudiantil","text":"Equipo de estudiantes de la Universidad Martin Lutero en Ocotal, Nueva Segovia que desarrollan esta aplicaci\u00f3n (web, m\u00f3vil, API).","title":"Desarrollo de app para registro de asistencia estudiantil"},{"location":"#instructor","text":"Datos de contacto Carlos Andr\u00e9s P\u00e9rez. 8 1 3 2 3 0 0 0 prof.cperezu@uml.edu.ni","title":"Instructor"},{"location":"#equipo-de-estudiantes","text":"II y III a\u00f1o de Ingenier\u00eda en Sistemas Juan Magdiel Oscar Rosales Jorge Gaitan Luis Benavidez Marvin Vallejo","title":"Equipo de estudiantes"},{"location":"#colaborador","text":"Ingeniero en sistemas Adri\u00e1n Calderon. 8 1 3 2 3 0 0 0 amarusadrian@gmail.com","title":"Colaborador"},{"location":"#detalles","text":"Detalles de los procesos que se prentenden cubrir Registro de estudiantes, profesores y personal de administraci\u00f3n Registro del horario trimestral Registro de las asignaturas por carrera Registro de las carreras Registro de los grupos por carrera y a\u00f1o lectivo Registro de la asistencia por parte de los profesores Generaci\u00f3n de reportes(Diario, Mensual y Trimestral) Periodo programado Desde el 12 de octubre de 2019 al 12 de febrero de 2020","title":"Detalles"},{"location":"apps-1/","text":"Software necesario para el desarrollo (inicial) Descarga y configuraci\u00f3n de: Programas Cada uno de los programas puede presentar diversas situaciones. Favor documentarse sobre ello: Trabajaremos sobre Windows (recomendado el 10) Vagrant Git (gitscm) VirtualBox FileZilla Putty o Termius Navegador web (chrome u otro) Visual Studio Code IDE: PHPStorm IDE: WebStorm PHP 7 Composer Carpeta de trabajo Crear una carpeta en su computadora en la ubicaci\u00f3n que desean Establecer el nombre: app-uml-asistencia Procesos Instalaci\u00f3n de la box laravel/homestead , abrir una consola de Git o WIndows en la carpeta app-uml-asistencia Escribir: vagrant init laravel/homestead Enter Esto demora un cierto tiempo ya que descarga la primera vez desde internet. Solo la primera vez se ejecuta este comando. Despu\u00e9s usaremos el comando siguiente para iniciar la m\u00e1quina virtual. vagrant up Enter para arrancar la m\u00e1quina virtual vagrant ssh Enter para acceder al sistema operativo virtual desde windows Credenciales Usuario: vagrant Enter Clave: vagrant Enter Una vez dentro de la m\u00e1quina tenemos este mensaje en la consola. Esto nos indica que estamos listos para instalar los demas componentes. Enlace \u00fatil para adquirir algunos servicios gratuitos Paquete de estudiante en GitHub","title":"0.1 - Instalaciones"},{"location":"apps-1/#software-necesario-para-el-desarrollo-inicial","text":"","title":"Software necesario para el desarrollo (inicial)"},{"location":"apps-1/#descarga-y-configuracion-de","text":"Programas Cada uno de los programas puede presentar diversas situaciones. Favor documentarse sobre ello: Trabajaremos sobre Windows (recomendado el 10) Vagrant Git (gitscm) VirtualBox FileZilla Putty o Termius Navegador web (chrome u otro) Visual Studio Code IDE: PHPStorm IDE: WebStorm PHP 7 Composer","title":"Descarga y configuraci\u00f3n de:"},{"location":"apps-1/#carpeta-de-trabajo","text":"","title":"Carpeta de trabajo"},{"location":"apps-1/#crear-una-carpeta-en-su-computadora-en-la-ubicacion-que-desean","text":"Establecer el nombre: app-uml-asistencia","title":"Crear una carpeta en su computadora en la ubicaci\u00f3n que desean"},{"location":"apps-1/#procesos","text":"Instalaci\u00f3n de la box laravel/homestead , abrir una consola de Git o WIndows en la carpeta app-uml-asistencia Escribir: vagrant init laravel/homestead Enter Esto demora un cierto tiempo ya que descarga la primera vez desde internet. Solo la primera vez se ejecuta este comando. Despu\u00e9s usaremos el comando siguiente para iniciar la m\u00e1quina virtual. vagrant up Enter para arrancar la m\u00e1quina virtual vagrant ssh Enter para acceder al sistema operativo virtual desde windows Credenciales Usuario: vagrant Enter Clave: vagrant Enter Una vez dentro de la m\u00e1quina tenemos este mensaje en la consola. Esto nos indica que estamos listos para instalar los demas componentes.","title":"Procesos"},{"location":"apps-1/#enlace-util-para-adquirir-algunos-servicios-gratuitos","text":"Paquete de estudiante en GitHub","title":"Enlace \u00fatil para adquirir algunos servicios gratuitos"},{"location":"laravel/","text":"\u00bfQu\u00e9 es Laravel? Definici\u00f3n Laravel es un framework de c\u00f3digo abierto para desarrollar aplicaciones y servicios web con PHP 5 y PHP 7. Su filosof\u00eda es desarrollar c\u00f3digo PHP de forma elegante y simple, evitando el \"c\u00f3digo espagueti\". Fue creado en 2011 y tiene una gran influencia de frameworks como Ruby on Rails, Sinatra y ASP.NET MVC. Caracter\u00edsticas Sistema de ruteo, tambi\u00e9n RESTful Blade, Motor de plantillas Peticiones Fluent Eloquent ORM Basado en Composer Soporte para el cach\u00e9 Soporte para MVC Usa componentes de Symfony Adopta las especificaciones PSR-2 y PSR-4 Que vamos a usar de Laravel V\u00e1lido mencionar que no vamos a aprender Laravel a un nivel avanzado. Iremos viendo lo necesario para la aplicaci\u00f3n. Cada uno puede ampliar sus conceptos sobre Laravel en cursos libres en YouTube o en alguna plataforma online. Curso en YouTube Cursos en Lynda.com Cursos en Linkedin Learning Cursos en Udemy Laravel y las creaci\u00f3n de las tablas Para crear cada una de las tablas de nuestro sistema usaremos la siguiente sintaxis. Dentro de una consola git desde la carpeta del proyecto escribir: Consola de Git php artisan make:model NombreTabla -a Este comando crear\u00e1 4 elementos. Segun el nombre de la tabla. Un model (para acceder a la tabla). Se guarda dentro de la carpeta app/NombreTabla.php Una migration (para crear o modificar la tabla). Se guarda dentro de la carpeta database/migrations/2019_11_11_021232_create_nombre_tablas_table.php (la fecha y hora es aleatoria) Un controller (para crear las interfaces de acceso). Se guarda dentro de la carpeta app/Http/Controllers/NombreTablaController.php Un factory (para llenar datos ficticios). Se guarda dentro de la carpeta database/factories/NombreTablaFactory.php Comandos para crear la base de datos Crear las tablas php artisan migrate Actualizar las tablas php artisan migrate:refresh Eliminar todo y crear desde 0 php artisan migrate:fresh","title":"2.0 - Informaci\u00f3n de Laravel"},{"location":"laravel/#que-es-laravel","text":"","title":"\u00bfQu\u00e9 es Laravel?"},{"location":"laravel/#definicion","text":"Laravel es un framework de c\u00f3digo abierto para desarrollar aplicaciones y servicios web con PHP 5 y PHP 7. Su filosof\u00eda es desarrollar c\u00f3digo PHP de forma elegante y simple, evitando el \"c\u00f3digo espagueti\". Fue creado en 2011 y tiene una gran influencia de frameworks como Ruby on Rails, Sinatra y ASP.NET MVC.","title":"Definici\u00f3n"},{"location":"laravel/#caracteristicas","text":"Sistema de ruteo, tambi\u00e9n RESTful Blade, Motor de plantillas Peticiones Fluent Eloquent ORM Basado en Composer Soporte para el cach\u00e9 Soporte para MVC Usa componentes de Symfony Adopta las especificaciones PSR-2 y PSR-4","title":"Caracter\u00edsticas"},{"location":"laravel/#que-vamos-a-usar-de-laravel","text":"V\u00e1lido mencionar que no vamos a aprender Laravel a un nivel avanzado. Iremos viendo lo necesario para la aplicaci\u00f3n. Cada uno puede ampliar sus conceptos sobre Laravel en cursos libres en YouTube o en alguna plataforma online. Curso en YouTube Cursos en Lynda.com Cursos en Linkedin Learning Cursos en Udemy","title":"Que vamos a usar de Laravel"},{"location":"laravel/#laravel-y-las-creacion-de-las-tablas","text":"Para crear cada una de las tablas de nuestro sistema usaremos la siguiente sintaxis. Dentro de una consola git desde la carpeta del proyecto escribir: Consola de Git php artisan make:model NombreTabla -a Este comando crear\u00e1 4 elementos. Segun el nombre de la tabla. Un model (para acceder a la tabla). Se guarda dentro de la carpeta app/NombreTabla.php Una migration (para crear o modificar la tabla). Se guarda dentro de la carpeta database/migrations/2019_11_11_021232_create_nombre_tablas_table.php (la fecha y hora es aleatoria) Un controller (para crear las interfaces de acceso). Se guarda dentro de la carpeta app/Http/Controllers/NombreTablaController.php Un factory (para llenar datos ficticios). Se guarda dentro de la carpeta database/factories/NombreTablaFactory.php","title":"Laravel y las creaci\u00f3n de las tablas"},{"location":"laravel/#comandos-para-crear-la-base-de-datos","text":"Crear las tablas php artisan migrate Actualizar las tablas php artisan migrate:refresh Eliminar todo y crear desde 0 php artisan migrate:fresh","title":"Comandos para crear la base de datos"},{"location":"lec-1/","text":"Instalaci\u00f3n de Laravel y activaci\u00f3n de homestead Instalar Laravel en la carpeta app-uml-asistencia Laravel es un framework para desarrollo con PHP que permite escribir c\u00f3digo sencillo e incluye diversas herramientas para el enrutamiento, bases de datos, login y funciones de correo electr\u00f3nico. Abrir la consola en la carpeta app-uml-asistencia y escribir composer create-project laravel/laravel --prefer-dist . Enter No olvidar agregar el punto al final para que se cree la instalaci\u00f3n dentro de la carpeta adecuada Instalar el componente de homestead para Laravel Laravel / homestead es una libreria para laravel que ajusta varios campos de configuraci\u00f3n que nos permite arrancar con mayor rapidez nuestro desplieque de la m\u00e1quina virtual Antes de correr este comando borrar manualmente el archivo Vagranfile En la misma carpeta abrir una consola y correr composer require laravel/homestead --dev Enter Luego activar homestead vendor\\\\bin\\\\homestead make Enter","title":"1.1 - Laravel y activaci\u00f3n de homestead"},{"location":"lec-1/#instalacion-de-laravel-y-activacion-de-homestead","text":"","title":"Instalaci\u00f3n de Laravel y activaci\u00f3n de homestead"},{"location":"lec-1/#instalar-laravel-en-la-carpeta-app-uml-asistencia","text":"Laravel es un framework para desarrollo con PHP que permite escribir c\u00f3digo sencillo e incluye diversas herramientas para el enrutamiento, bases de datos, login y funciones de correo electr\u00f3nico. Abrir la consola en la carpeta app-uml-asistencia y escribir composer create-project laravel/laravel --prefer-dist . Enter No olvidar agregar el punto al final para que se cree la instalaci\u00f3n dentro de la carpeta adecuada","title":"Instalar Laravel en la carpeta app-uml-asistencia"},{"location":"lec-1/#instalar-el-componente-de-homestead-para-laravel","text":"Laravel / homestead es una libreria para laravel que ajusta varios campos de configuraci\u00f3n que nos permite arrancar con mayor rapidez nuestro desplieque de la m\u00e1quina virtual Antes de correr este comando borrar manualmente el archivo Vagranfile En la misma carpeta abrir una consola y correr composer require laravel/homestead --dev Enter Luego activar homestead vendor\\\\bin\\\\homestead make Enter","title":"Instalar el componente de homestead para Laravel"},{"location":"lec-2/","text":"Configurar el virtualhost para la app Crear un servidor virtual para el dominio umlasistencia.app Cuando ejecutamos el ultimo comando vendor\\\\bin\\\\homestead make Enter en la secci\u00f3n anterior se crean dos archivos que se llaman Homestead.yaml y Vagranfile. En el archivo Homestead.yaml cambiar el nombre del servidor y el la ruta de las carpetas. Debe quedar de esta manera(Solo cambiar lo que se explica en el video) Solo cambiar lo que les explico en el video. En mi caso tengo varios sistemas y por tanto la configuraci\u00f3n puede cambiar. Crear el servidor virtual en el fichero hosts de Windows Abrir la ruta que se muestra en la imagen Abrir la ventana de ejecutar en Windows Win + R Escribir %windir%\\system32\\drivers\\host Enter Abrir el archivo hosts Abrir este archivo usando Notepad++, dando clic derecho sobre ese fichero Agregar la direccion ip y el nombre de dominio al final del archivo y guardar. 192.168.10.10 umlasistencia.curso Encender el servidor y probar en el navegador Para encender Laravel desde el servidor escribimos en la consola dentro del servidor y dentro de la carpeta app-uml-asistencia php artisan serve Ahora en el navegador web que usemos podemos anotar la url umlasistencia.curso y nos muestra la pagina principal de Laravel Videos de apoyo en YouTube","title":"1.2 - Configurar virtual host"},{"location":"lec-2/#configurar-el-virtualhost-para-la-app","text":"","title":"Configurar el virtualhost para la app"},{"location":"lec-2/#crear-un-servidor-virtual-para-el-dominio-umlasistenciaapp","text":"Cuando ejecutamos el ultimo comando vendor\\\\bin\\\\homestead make Enter en la secci\u00f3n anterior se crean dos archivos que se llaman Homestead.yaml y Vagranfile. En el archivo Homestead.yaml cambiar el nombre del servidor y el la ruta de las carpetas. Debe quedar de esta manera(Solo cambiar lo que se explica en el video) Solo cambiar lo que les explico en el video. En mi caso tengo varios sistemas y por tanto la configuraci\u00f3n puede cambiar.","title":"Crear un servidor virtual para el dominio umlasistencia.app"},{"location":"lec-2/#crear-el-servidor-virtual-en-el-fichero-hosts-de-windows","text":"Abrir la ruta que se muestra en la imagen Abrir la ventana de ejecutar en Windows Win + R Escribir %windir%\\system32\\drivers\\host Enter Abrir el archivo hosts Abrir este archivo usando Notepad++, dando clic derecho sobre ese fichero Agregar la direccion ip y el nombre de dominio al final del archivo y guardar. 192.168.10.10 umlasistencia.curso","title":"Crear el servidor virtual en el fichero hosts de Windows"},{"location":"lec-2/#encender-el-servidor-y-probar-en-el-navegador","text":"Para encender Laravel desde el servidor escribimos en la consola dentro del servidor y dentro de la carpeta app-uml-asistencia php artisan serve Ahora en el navegador web que usemos podemos anotar la url umlasistencia.curso y nos muestra la pagina principal de Laravel","title":"Encender el servidor y probar en el navegador"},{"location":"lec-2/#videos-de-apoyo-en-youtube","text":"","title":"Videos de apoyo en YouTube"},{"location":"lec-3/","text":"Inicializar el repositorio Git en la m\u00e1quina de trabajo Operaciones necesarias 1.3 Incializar git Dar clic derecho dentro de la carpeta del proyecto Elegir Git bash here Escribir git init Enter Esto crea una carpeta oculta llamada .git que almacena todo los cambios en el codigo. 1.3.1 Agregar los ficheros Siempre dentro de la consola Escribir git add * Enter Esto agrega todo los ficheros a los que vamos a dar seguimiento. En la carpeta existe un archivo llamado .gitignore que tiene guardado los archivos y carpetas que no se les da seguimiento. Estos archivos no se agregan al repositorio porque no se requiere llevar el control de versi\u00f3n de ellos. 1.3.2 Confirmar los cambios. Siempre dentro de la consola Escribir git commit -m \"Inicio del proyecto\" Enter Los commit son las confirmaciones de los cambios. El parametro -m permite agregar el mensaje para explicar en que consiste el cambio en el c\u00f3digo. 1.3 Crear el repositorio en GitHub 1.3.1 Crear el repositorio online Ingresar a GitHub y crear un nuevo repositorio Repository name: app-uml-asistencia Description: Sistema de asistencia Visibilidad: Private Y por \u00faltimo: Create repository 1.3.2 Agregar el repositorio remoto a la carpeta local Una vez creado en Github vamos a agregar la url del repositorio remoto a nuestro repositorio local para luego subir los archivos. Copiar la URL que se crea en Github git remote add origin https://github.com/username/app-uml-asistencia.git similar a este formato. Tomar la URL del repositorio tal como se muestra en la imagen. Pegar en la consola de Git y presionar Enter 1.3.3 Subir el proyecto Ahora vamos a subir el proyecto con el comando git push -u origin master Enter 1.3 Notas sobre Git La primera vez que se hace carga de ficheros a GitHub nos pide que se configure el usuario y el correo. En la consola podemos hacerlo de la manera siguiente. git config --global user.name \"Su nombre Su apellido\" Enter git config --global user.email \"correo@gmail.com\" Enter","title":"1.3 - Inicializar el repositorio"},{"location":"lec-3/#inicializar-el-repositorio-git-en-la-maquina-de-trabajo","text":"","title":"Inicializar el repositorio Git en la m\u00e1quina de trabajo"},{"location":"lec-3/#operaciones-necesarias","text":"","title":"Operaciones necesarias"},{"location":"lec-3/#13-incializar-git","text":"Dar clic derecho dentro de la carpeta del proyecto Elegir Git bash here Escribir git init Enter Esto crea una carpeta oculta llamada .git que almacena todo los cambios en el codigo.","title":"1.3  Incializar git"},{"location":"lec-3/#131-agregar-los-ficheros","text":"Siempre dentro de la consola Escribir git add * Enter Esto agrega todo los ficheros a los que vamos a dar seguimiento. En la carpeta existe un archivo llamado .gitignore que tiene guardado los archivos y carpetas que no se les da seguimiento. Estos archivos no se agregan al repositorio porque no se requiere llevar el control de versi\u00f3n de ellos.","title":"1.3.1   Agregar los ficheros"},{"location":"lec-3/#132-confirmar-los-cambios","text":"Siempre dentro de la consola Escribir git commit -m \"Inicio del proyecto\" Enter Los commit son las confirmaciones de los cambios. El parametro -m permite agregar el mensaje para explicar en que consiste el cambio en el c\u00f3digo.","title":"1.3.2   Confirmar los cambios."},{"location":"lec-3/#13-crear-el-repositorio-en-github","text":"","title":"1.3  Crear el repositorio en GitHub"},{"location":"lec-3/#131-crear-el-repositorio-online","text":"Ingresar a GitHub y crear un nuevo repositorio Repository name: app-uml-asistencia Description: Sistema de asistencia Visibilidad: Private Y por \u00faltimo: Create repository","title":"1.3.1   Crear el repositorio online"},{"location":"lec-3/#132-agregar-el-repositorio-remoto-a-la-carpeta-local","text":"Una vez creado en Github vamos a agregar la url del repositorio remoto a nuestro repositorio local para luego subir los archivos. Copiar la URL que se crea en Github git remote add origin https://github.com/username/app-uml-asistencia.git similar a este formato. Tomar la URL del repositorio tal como se muestra en la imagen. Pegar en la consola de Git y presionar Enter","title":"1.3.2   Agregar el repositorio remoto a la carpeta local"},{"location":"lec-3/#133-subir-el-proyecto","text":"Ahora vamos a subir el proyecto con el comando git push -u origin master Enter","title":"1.3.3   Subir el proyecto"},{"location":"lec-3/#13-notas-sobre-git","text":"La primera vez que se hace carga de ficheros a GitHub nos pide que se configure el usuario y el correo. En la consola podemos hacerlo de la manera siguiente. git config --global user.name \"Su nombre Su apellido\" Enter git config --global user.email \"correo@gmail.com\" Enter","title":"1.3  Notas sobre Git"},{"location":"modelo-universidad/","text":"Dise\u00f1o del modelo de la universidad y todos los elementos necesarios Modelo de la universidad Esta tabla nos permitir\u00e1 registrar los datos generales de la universidad Atributos Campo Tipo Longitud Descripci\u00f3n Nulo Por defecto id bigIncrements auto Llave principal No nombre string 32 Nombre de la universidad No UML direccion string 64 Direcci\u00f3n de la universidad No Ocotal telefono string 20 N\u00famero de tel\u00e9fono No 27321234 email string 30 Email de la universidad No uml@uml.edu.ni lema string 100 Frase de la universidad No Un ministerio de las AdD Crear el modelo desde la consola de Laravel y agregar los demas elementos. Abrir la consola en la carpeta del proyecto Escribir php artisan make:model Universidad -m Enter Este comando crear\u00e1 4 elementos. Segun el nombre de la tabla. Un model (para acceder a la tabla). Se guarda dentro de la carpeta app/Universidad.php Una migration (para crear o modificar la tabla). Se guarda dentro de la carpeta database/migrations/2019_11_11_021232_create_universidads_table.php (la fecha y hora es aleatoria) Un controller (para crear las interfaces de acceso). Se guarda dentro de la carpeta app/Http/Controllers/UniversidadController.php Un factory (para llenar datos ficticios). Se guarda dentro de la carpeta database/factories/UniversidadFactory.php","title":"2.2 - Universidad"},{"location":"modelo-universidad/#diseno-del-modelo-de-la-universidad-y-todos-los-elementos-necesarios","text":"","title":"Dise\u00f1o del modelo de la universidad y todos los elementos necesarios"},{"location":"modelo-universidad/#modelo-de-la-universidad","text":"Esta tabla nos permitir\u00e1 registrar los datos generales de la universidad","title":"Modelo de la universidad"},{"location":"modelo-universidad/#atributos","text":"Campo Tipo Longitud Descripci\u00f3n Nulo Por defecto id bigIncrements auto Llave principal No nombre string 32 Nombre de la universidad No UML direccion string 64 Direcci\u00f3n de la universidad No Ocotal telefono string 20 N\u00famero de tel\u00e9fono No 27321234 email string 30 Email de la universidad No uml@uml.edu.ni lema string 100 Frase de la universidad No Un ministerio de las AdD","title":"Atributos"},{"location":"modelo-universidad/#crear-el-modelo-desde-la-consola-de-laravel-y-agregar-los-demas-elementos","text":"Abrir la consola en la carpeta del proyecto Escribir php artisan make:model Universidad -m Enter Este comando crear\u00e1 4 elementos. Segun el nombre de la tabla. Un model (para acceder a la tabla). Se guarda dentro de la carpeta app/Universidad.php Una migration (para crear o modificar la tabla). Se guarda dentro de la carpeta database/migrations/2019_11_11_021232_create_universidads_table.php (la fecha y hora es aleatoria) Un controller (para crear las interfaces de acceso). Se guarda dentro de la carpeta app/Http/Controllers/UniversidadController.php Un factory (para llenar datos ficticios). Se guarda dentro de la carpeta database/factories/UniversidadFactory.php","title":"Crear el modelo desde la consola de Laravel y agregar los demas elementos."},{"location":"modelo-usuario/","text":"Dise\u00f1o del modelo de los usuarios Descripci\u00f3n Esta tabla nos permitir\u00e1 registrar a los estudiantes, docentes y otros funcionarios que usar\u00e1n la aplicaci\u00f3n. Importante tener en cuenta lo siguiente Los usuarios son las personas de la cuales tomaremos sus datos personales Si es estudiante debemos recuerar su correo electr\u00f3nico y su n\u00famero de carnet Si es docente unicamente su correo. Para los demas usuarios llevaremos tambien su cargo. Atributos id nombre1 nombre2 apellido1 apellido2 sexo fecha_nac email direccion municipio departamento pais tipo_usuario cargo carnet Crear el modelo desde la consola de Laravel y agregar los dem\u00e1s elementos. Abrir la consola en la carpeta del proyecto Consola de Git php artisan make:model Usuario -m Este comando crear\u00e1 4 elementos. Segun el nombre de la tabla. Un model (para acceder a la tabla). Se guarda dentro de la carpeta app/Usuario.php Una migration (para crear o modificar la tabla). Se guarda dentro de la carpeta database/migrations/2019_11_11_021232_create_usuarios_table.php (la fecha y hora es aleatoria) Un controller (para crear las interfaces de acceso). Se guarda dentro de la carpeta app/Http/Controllers/UsuarioController.php Un factory (para llenar datos ficticios). Se guarda dentro de la carpeta database/factories/UsuarioFactory.php Model <?php namespace App ; use Illuminate\\Database\\Eloquent\\Model ; class Usuario extends Model { // } Migration <?php use Illuminate\\Support\\Facades\\Schema ; use Illuminate\\Database\\Schema\\Blueprint ; use Illuminate\\Database\\Migrations\\Migration ; class CreateUsuariosTable extends Migration { /** * Run the migrations. * * @return void */ public function up () { Schema :: create ( 'usuarios' , function ( Blueprint $table ) { $table -> bigIncrements ( 'id' ); $table -> timestamps (); }); } /** * Reverse the migrations. * * @return void */ public function down () { Schema :: dropIfExists ( 'usuarios' ); } } Controller <?php namespace App\\Http\\Controllers ; use App\\Usuario ; use Illuminate\\Http\\Request ; class UsuarioController extends Controller { /** * Display a listing of the resource. * * @return \\Illuminate\\Http\\Response */ public function index () { // } /** * Show the form for creating a new resource. * * @return \\Illuminate\\Http\\Response */ public function create () { // } /** * Store a newly created resource in storage. * * @param \\Illuminate\\Http\\Request $request * @return \\Illuminate\\Http\\Response */ public function store ( Request $request ) { // } /** * Display the specified resource. * * @param \\App\\Usuario $usuario * @return \\Illuminate\\Http\\Response */ public function show ( Usuario $usuario ) { // } /** * Show the form for editing the specified resource. * * @param \\App\\Usuario $usuario * @return \\Illuminate\\Http\\Response */ public function edit ( Usuario $usuario ) { // } /** * Update the specified resource in storage. * * @param \\Illuminate\\Http\\Request $request * @param \\App\\Usuario $usuario * @return \\Illuminate\\Http\\Response */ public function update ( Request $request , Usuario $usuario ) { // } /** * Remove the specified resource from storage. * * @param \\App\\Usuario $usuario * @return \\Illuminate\\Http\\Response */ public function destroy ( Usuario $usuario ) { // } } Factory <?php /** @var \\Illuminate\\Database\\Eloquent\\Factory $factory */ use App\\Usuario ; use Faker\\Generator as Faker ; $factory -> define ( Usuario :: class , function ( Faker $faker ) { return [ // ]; });","title":"2.1 - Usuario"},{"location":"modelo-usuario/#diseno-del-modelo-de-los-usuarios","text":"","title":"Dise\u00f1o del modelo de los usuarios"},{"location":"modelo-usuario/#descripcion","text":"Esta tabla nos permitir\u00e1 registrar a los estudiantes, docentes y otros funcionarios que usar\u00e1n la aplicaci\u00f3n. Importante tener en cuenta lo siguiente Los usuarios son las personas de la cuales tomaremos sus datos personales Si es estudiante debemos recuerar su correo electr\u00f3nico y su n\u00famero de carnet Si es docente unicamente su correo. Para los demas usuarios llevaremos tambien su cargo.","title":"Descripci\u00f3n"},{"location":"modelo-usuario/#atributos","text":"id nombre1 nombre2 apellido1 apellido2 sexo fecha_nac email direccion municipio departamento pais tipo_usuario cargo carnet","title":"Atributos"},{"location":"modelo-usuario/#crear-el-modelo-desde-la-consola-de-laravel-y-agregar-los-demas-elementos","text":"Abrir la consola en la carpeta del proyecto Consola de Git php artisan make:model Usuario -m Este comando crear\u00e1 4 elementos. Segun el nombre de la tabla. Un model (para acceder a la tabla). Se guarda dentro de la carpeta app/Usuario.php Una migration (para crear o modificar la tabla). Se guarda dentro de la carpeta database/migrations/2019_11_11_021232_create_usuarios_table.php (la fecha y hora es aleatoria) Un controller (para crear las interfaces de acceso). Se guarda dentro de la carpeta app/Http/Controllers/UsuarioController.php Un factory (para llenar datos ficticios). Se guarda dentro de la carpeta database/factories/UsuarioFactory.php Model <?php namespace App ; use Illuminate\\Database\\Eloquent\\Model ; class Usuario extends Model { // } Migration <?php use Illuminate\\Support\\Facades\\Schema ; use Illuminate\\Database\\Schema\\Blueprint ; use Illuminate\\Database\\Migrations\\Migration ; class CreateUsuariosTable extends Migration { /** * Run the migrations. * * @return void */ public function up () { Schema :: create ( 'usuarios' , function ( Blueprint $table ) { $table -> bigIncrements ( 'id' ); $table -> timestamps (); }); } /** * Reverse the migrations. * * @return void */ public function down () { Schema :: dropIfExists ( 'usuarios' ); } } Controller <?php namespace App\\Http\\Controllers ; use App\\Usuario ; use Illuminate\\Http\\Request ; class UsuarioController extends Controller { /** * Display a listing of the resource. * * @return \\Illuminate\\Http\\Response */ public function index () { // } /** * Show the form for creating a new resource. * * @return \\Illuminate\\Http\\Response */ public function create () { // } /** * Store a newly created resource in storage. * * @param \\Illuminate\\Http\\Request $request * @return \\Illuminate\\Http\\Response */ public function store ( Request $request ) { // } /** * Display the specified resource. * * @param \\App\\Usuario $usuario * @return \\Illuminate\\Http\\Response */ public function show ( Usuario $usuario ) { // } /** * Show the form for editing the specified resource. * * @param \\App\\Usuario $usuario * @return \\Illuminate\\Http\\Response */ public function edit ( Usuario $usuario ) { // } /** * Update the specified resource in storage. * * @param \\Illuminate\\Http\\Request $request * @param \\App\\Usuario $usuario * @return \\Illuminate\\Http\\Response */ public function update ( Request $request , Usuario $usuario ) { // } /** * Remove the specified resource from storage. * * @param \\App\\Usuario $usuario * @return \\Illuminate\\Http\\Response */ public function destroy ( Usuario $usuario ) { // } } Factory <?php /** @var \\Illuminate\\Database\\Eloquent\\Factory $factory */ use App\\Usuario ; use Faker\\Generator as Faker ; $factory -> define ( Usuario :: class , function ( Faker $faker ) { return [ // ]; });","title":"Crear el modelo desde la consola de Laravel y agregar los dem\u00e1s elementos."}]}